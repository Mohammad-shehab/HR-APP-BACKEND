// <auto-generated />
using System;
using HR_APP_BACKEND.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HR_APP_BACKEND.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseApplication", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<DateTime>("AppliedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApplicationId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ReviewedBy");

                    b.HasIndex("UserId");

                    b.ToTable("CourseApplications");
                });

            modelBuilder.Entity("HR_APP_BACKEND.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HR_APP_BACKEND.Models.Certification", b =>
                {
                    b.Property<int>("CertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificationId"));

                    b.Property<string>("CertificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CertificationId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("HR_APP_BACKEND.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CertificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CertificationName = "SQL Expert",
                            CourseName = "Advanced SQL",
                            DepartmentId = 1,
                            Description = "Master SQL for data management",
                            Duration = "2 weeks"
                        },
                        new
                        {
                            CourseId = 2,
                            CertificationName = "Cybersecurity Fundamentals",
                            CourseName = "Cybersecurity Basics",
                            DepartmentId = 1,
                            Description = "Learn to secure systems",
                            Duration = "3 weeks"
                        },
                        new
                        {
                            CourseId = 3,
                            CertificationName = "Cloud Practitioner",
                            CourseName = "Cloud Computing",
                            DepartmentId = 1,
                            Description = "Introduction to AWS and Azure",
                            Duration = "4 weeks"
                        },
                        new
                        {
                            CourseId = 4,
                            CertificationName = "Finance Analyst",
                            CourseName = "Financial Analysis",
                            DepartmentId = 2,
                            Description = "Analyze financial statements",
                            Duration = "3 weeks"
                        },
                        new
                        {
                            CourseId = 5,
                            CertificationName = "Risk Manager",
                            CourseName = "Risk Management",
                            DepartmentId = 2,
                            Description = "Manage financial risks",
                            Duration = "2 weeks"
                        },
                        new
                        {
                            CourseId = 6,
                            CertificationName = "Accounting Basics",
                            CourseName = "Accounting Principles",
                            DepartmentId = 2,
                            Description = "Basics of accounting",
                            Duration = "4 weeks"
                        },
                        new
                        {
                            CourseId = 7,
                            CertificationName = "Recruitment Specialist",
                            CourseName = "Recruitment Strategies",
                            DepartmentId = 3,
                            Description = "Effective hiring techniques",
                            Duration = "2 weeks"
                        },
                        new
                        {
                            CourseId = 8,
                            CertificationName = "Engagement Expert",
                            CourseName = "Employee Engagement",
                            DepartmentId = 3,
                            Description = "Boost workplace morale",
                            Duration = "3 weeks"
                        },
                        new
                        {
                            CourseId = 9,
                            CertificationName = "Labor Law Certified",
                            CourseName = "Labor Law",
                            DepartmentId = 3,
                            Description = "Understand employment laws",
                            Duration = "4 weeks"
                        },
                        new
                        {
                            CourseId = 10,
                            CertificationName = "Digital Marketer",
                            CourseName = "Digital Marketing",
                            DepartmentId = 4,
                            Description = "Online marketing strategies",
                            Duration = "3 weeks"
                        },
                        new
                        {
                            CourseId = 11,
                            CertificationName = "Brand Manager",
                            CourseName = "Brand Management",
                            DepartmentId = 4,
                            Description = "Build strong brands",
                            Duration = "2 weeks"
                        },
                        new
                        {
                            CourseId = 12,
                            CertificationName = "Market Researcher",
                            CourseName = "Market Research",
                            DepartmentId = 4,
                            Description = "Analyze market trends",
                            Duration = "4 weeks"
                        },
                        new
                        {
                            CourseId = 13,
                            CertificationName = "Process Expert",
                            CourseName = "Process Optimization",
                            DepartmentId = 5,
                            Description = "Improve operational efficiency",
                            Duration = "3 weeks"
                        },
                        new
                        {
                            CourseId = 14,
                            CertificationName = "Supply Chain Specialist",
                            CourseName = "Supply Chain Management",
                            DepartmentId = 5,
                            Description = "Manage logistics",
                            Duration = "4 weeks"
                        },
                        new
                        {
                            CourseId = 15,
                            CertificationName = "Project Manager",
                            CourseName = "Project Management",
                            DepartmentId = 5,
                            Description = "Lead projects effectively",
                            Duration = "2 weeks"
                        },
                        new
                        {
                            CourseId = 16,
                            CertificationName = "HR Analyst",
                            CourseName = "HR Analytics",
                            DepartmentId = 6,
                            Description = "Use data in HR decisions",
                            Duration = "3 weeks"
                        },
                        new
                        {
                            CourseId = 17,
                            CertificationName = "Conflict Mediator",
                            CourseName = "Conflict Resolution",
                            DepartmentId = 6,
                            Description = "Resolve workplace disputes",
                            Duration = "2 weeks"
                        },
                        new
                        {
                            CourseId = 18,
                            CertificationName = "Performance Specialist",
                            CourseName = "Performance Management",
                            DepartmentId = 6,
                            Description = "Evaluate employee performance",
                            Duration = "4 weeks"
                        });
                });

            modelBuilder.Entity("HR_APP_BACKEND.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentName = "IT"
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentName = "Finance"
                        },
                        new
                        {
                            DepartmentId = 3,
                            DepartmentName = "Human Resources"
                        },
                        new
                        {
                            DepartmentId = 4,
                            DepartmentName = "Marketing"
                        },
                        new
                        {
                            DepartmentId = 5,
                            DepartmentName = "Operations"
                        },
                        new
                        {
                            DepartmentId = 6,
                            DepartmentName = "HR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CourseApplication", b =>
                {
                    b.HasOne("HR_APP_BACKEND.Models.Course", "Course")
                        .WithMany("CourseApplications")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR_APP_BACKEND.Models.ApplicationUser", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HR_APP_BACKEND.Models.ApplicationUser", "Applicant")
                        .WithMany("CourseApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Course");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("HR_APP_BACKEND.Models.ApplicationUser", b =>
                {
                    b.HasOne("HR_APP_BACKEND.Models.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("HR_APP_BACKEND.Models.Certification", b =>
                {
                    b.HasOne("HR_APP_BACKEND.Models.Course", "Course")
                        .WithMany("Certifications")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR_APP_BACKEND.Models.ApplicationUser", "User")
                        .WithMany("Certifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HR_APP_BACKEND.Models.Course", b =>
                {
                    b.HasOne("HR_APP_BACKEND.Models.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HR_APP_BACKEND.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HR_APP_BACKEND.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR_APP_BACKEND.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HR_APP_BACKEND.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HR_APP_BACKEND.Models.ApplicationUser", b =>
                {
                    b.Navigation("Certifications");

                    b.Navigation("CourseApplications");

                    b.Navigation("ReviewedApplications");
                });

            modelBuilder.Entity("HR_APP_BACKEND.Models.Course", b =>
                {
                    b.Navigation("Certifications");

                    b.Navigation("CourseApplications");
                });

            modelBuilder.Entity("HR_APP_BACKEND.Models.Department", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
